{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time \n",
    "import numpy as np\n",
    "\n",
    "def countdown(t): \n",
    "    \n",
    "    while t: \n",
    "        mins, secs = divmod(t, 60) \n",
    "        timer = '{:02d}:{:02d}'.format(mins, secs) \n",
    "        print(timer, end=\"\\r\") \n",
    "        time.sleep(1) \n",
    "        t -= 1\n",
    "      \n",
    "    print('Node has been recovered') \n",
    "  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a is compromised, one of its neighbors is c\n",
      "Node has been recovered\n"
     ]
    }
   ],
   "source": [
    "network = { \"a\" : [\"c\"],\n",
    "            \"b\" : [\"c\", \"e\"],\n",
    "            \"c\" : [\"a\", \"b\", \"d\", \"e\"],\n",
    "            \"d\" : [\"c\"],\n",
    "            \"e\" : [\"c\", \"b\"]\n",
    "        } \n",
    "\n",
    "systems = [\"a\", \"b\", \"c\", \"d\", \"e\"]\n",
    "\n",
    "#initializaing a compromised node\n",
    "\n",
    "def generate_edges(network):\n",
    "    edges = []\n",
    "\n",
    "    # for each node in graph\n",
    "    for node in graph:\n",
    "\n",
    "        # for each neighbour node of a single node\n",
    "        for neighbour in graph[node]:\n",
    "            # if edge exists then append\n",
    "            edges.append((node, neighbour))\n",
    "    return edges\n",
    "\n",
    "neighbors = generate_edges(network)\n",
    "\n",
    "\n",
    "recovered = []\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'b'"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.choice(systems)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "e is compromised, one of its neighbors is c\n",
      "Node has been recovered\n",
      "e is compromised, one of its neighbors is b\n",
      "Node has been recovered\n",
      "c is compromised, one of its neighbors is a\n",
      "Node has been recovered\n",
      "c is compromised, one of its neighbors is b\n",
      "Node has been recovered\n",
      "c is compromised, one of its neighbors is d\n",
      "Node has been recovered\n",
      "c is compromised, one of its neighbors is e\n",
      "Node has been recovered\n",
      "b is compromised, one of its neighbors is c\n",
      "Node has been recovered\n",
      "b is compromised, one of its neighbors is e\n",
      "Node has been recovered\n",
      "a is compromised, one of its neighbors is c\n",
      "Node has been recovered\n",
      "b is compromised, one of its neighbors is c\n",
      "Node has been recovered\n",
      "b is compromised, one of its neighbors is e\n",
      "Node has been recovered\n",
      "d is compromised, one of its neighbors is c\n",
      "Node has been recovered\n"
     ]
    }
   ],
   "source": [
    "def attack():\n",
    "    compromised_nodes = [np.random.choice(systems)]\n",
    "    recovered = []\n",
    "    for com_node in compromised_nodes:\n",
    "        for node in neighbors:\n",
    "            if node[0] == com_node:\n",
    "                print(node[0] + \" is compromised, one of its neighbors is \" + node[1])\n",
    "                #how to ignore this while still running the rest of the code? \n",
    "                compromised_nodes.append(node[1])\n",
    "                countdown(5)\n",
    "                if node[0] in recovered:\n",
    "                    pass\n",
    "                else:\n",
    "                    recovered.append(node[0])\n",
    "        if len(recovered) == len(systems):\n",
    "            break\n",
    "        \n",
    "        #this code has some repeats, trying to figure out a way to break it        \n",
    "       \n",
    "                   \n",
    "attack()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
